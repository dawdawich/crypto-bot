version: "3"

services:
  rabbitmq:
    image: rabbitmq:3
    container_name: rabbitmq
    ports:
      - "5672:5672"   # RabbitMQ message broker port
      - "15672:15672" # RabbitMQ management console port
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - "crypto-bot-network"

  mongodb:
    image: mongo:latest
    hostname: mongodb
    restart: always
    ports:
      - "27017:27017"
    command: "mongod --replSet rs0"
    volumes:
      - "mongodb_data:/data/db"
    networks:
      - "crypto-bot-network"
    healthcheck:
      test: mongosh --eval 'try { rs.initiate(); } catch(e) {} rs.status().ok;' || exit 1
      retries: 1

  redis:
    image: redis:latest
    hostname: redis
    restart: always
    networks:
      - "crypto-bot-network"
    ports:
      - "6379:6379"
    environment:
      - ALLOW_EMPTY_PASSWORD=yes

  event-listener:
    build:
      context: .
      dockerfile: dockerfiles/EventListenerDockerfile
    environment:
      spring.profiles.active: prod
      SPRING_AMQP_DESERIALIZATION_TRUST_ALL: true
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      logstash:
        condition: service_started
    networks:
      - "crypto-bot-network"

  analyzer-service:
    build:
      context: .
      dockerfile: dockerfiles/AnalyzerServiceDockerfile
    environment:
      spring.profiles.active: prod
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      event-listener:
        condition: service_started
      logstash:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - "crypto-bot-network"

  api-service:
    build:
      context: .
      dockerfile: dockerfiles/ApiServiceDockerfile
    environment:
      spring.profiles.active: prod
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      logstash:
        condition: service_started
    ports:
      - "8080:8080"
    networks:
      - "crypto-bot-network"

  trade-manager-service:
    build:
      context: .
      dockerfile: dockerfiles/TradeManagerDockerfile
    environment:
      spring.profiles.active: prod
      SPRING_AMQP_DESERIALIZATION_TRUST_ALL: true
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      logstash:
        condition: service_started
    networks:
      - "crypto-bot-network"

  ui:
    build:
      context: crypto-bot-ui
      dockerfile: ../dockerfiles/UIDockerfileProd
    depends_on:
      - api-service
    ports:
      - "3000:80"
      - "443:443"
    networks:
      - "crypto-bot-network"
    volumes:
      - "./init-files/nginx.conf:/etc/nginx/conf.d/default.conf"
      - "./init-files/ssl-certs/joat_trade.crt:/etc/nginx/ssl/joat_trade.crt"
      - "./init-files/ssl-certs/joat_trade.key:/etc/nginx/ssl/joat_trade.key"

#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
#    environment:
#      - discovery.type=single-node
#    volumes:
#      - ./init-files/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
#    ports:
#      - "9200:9200"
#    networks:
#      - "crypto-bot-network"

#  kibana:
#    image: docker.elastic.co/kibana/kibana:8.11.3
#    ports:
#      - "5601:5601"
#    depends_on:
#      - elasticsearch
#    networks:
#      - "crypto-bot-network"

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.3
    ports:
      - "5000"
    volumes:
      - ./init-files/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
#    depends_on:
#      - elasticsearch
    networks:
      - "crypto-bot-network"

volumes:
  zookeeper_data:
    driver: local
  mongodb_data:
    driver: local

networks:
  crypto-bot-network:
